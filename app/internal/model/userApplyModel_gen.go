// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userApplyFieldNames          = builder.RawFieldNames(&UserApply{})
	userApplyRows                = strings.Join(userApplyFieldNames, ",")
	userApplyRowsExpectAutoSet   = strings.Join(stringx.Remove(userApplyFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	userApplyRowsWithPlaceHolder = strings.Join(stringx.Remove(userApplyFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"
)

type (
	userApplyModel interface {
		Insert(ctx context.Context, session sqlx.Session, data *UserApply) (sql.Result, error)
		FindOne(ctx context.Context, session sqlx.Session, id int64) (*UserApply, error)
		Update(ctx context.Context, session sqlx.Session, data *UserApply) (sql.Result, error)
		UpdateAndSql(ctx context.Context, session sqlx.Session, data *UserApply, andSql string) (sql.Result, error)

		Delete(ctx context.Context, session sqlx.Session, id int64) error
	}

	defaultUserApplyModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UserApply struct {
		Id         int64          `db:"id"`          // 申请ID
		Uid        int64          `db:"uid"`         // 申请人UID
		Type       int64          `db:"type"`        // 申请类型 1加好友
		TargetId   int64          `db:"target_id"`   // 接收人UID
		Msg        sql.NullString `db:"msg"`         // 申请信息
		Status     int64          `db:"status"`      // 申请状态 1待审批 2同意
		ReadStatus int64          `db:"read_status"` // 阅读状态 1未读 2已读
		CreateTime time.Time      `db:"create_time"` // 创建时间
		UpdateTime time.Time      `db:"update_time"` // 修改时间
	}
)

func newUserApplyModel(conn sqlx.SqlConn) *defaultUserApplyModel {
	return &defaultUserApplyModel{
		conn:  conn,
		table: "`user_apply`",
	}
}

func (m *defaultUserApplyModel) Insert(ctx context.Context, session sqlx.Session, data *UserApply) (sql.Result, error) {
	//data.DeleteTime = time.Unix(0,0)

	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, userApplyRowsExpectAutoSet)
	if session != nil {
		return session.ExecCtx(ctx, query, data.Uid, data.Type, data.TargetId, data.Msg, data.Status, data.ReadStatus)
	}
	return m.conn.ExecCtx(ctx, query, data.Uid, data.Type, data.TargetId, data.Msg, data.Status, data.ReadStatus)
}

func (m *defaultUserApplyModel) FindOne(ctx context.Context, session sqlx.Session, id int64) (*UserApply, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ?  limit 1", userApplyRows, m.table)
	var resp UserApply
	var err error
	if session != nil {
		err = session.QueryRowCtx(ctx, &resp, query, id)
	} else {
		err = m.conn.QueryRowCtx(ctx, &resp, query, id)
	}
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserApplyModel) Update(ctx context.Context, session sqlx.Session, data *UserApply) (sql.Result, error) {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userApplyRowsWithPlaceHolder)
	if session != nil {
		return session.ExecCtx(ctx, query, data.Uid, data.Type, data.TargetId, data.Msg, data.Status, data.ReadStatus, data.Id)
	}
	return m.conn.ExecCtx(ctx, query, data.Uid, data.Type, data.TargetId, data.Msg, data.Status, data.ReadStatus, data.Id)
}

func (m *defaultUserApplyModel) UpdateAndSql(ctx context.Context, session sqlx.Session, data *UserApply, andSql string) (sql.Result, error) {
	query := fmt.Sprintf("update %s set %s where `id` = ? %s", m.table, userApplyRowsWithPlaceHolder, andSql)
	if session != nil {
		return session.ExecCtx(ctx, query, data.Uid, data.Type, data.TargetId, data.Msg, data.Status, data.ReadStatus, data.Id)
	}
	return m.conn.ExecCtx(ctx, query, data.Uid, data.Type, data.TargetId, data.Msg, data.Status, data.ReadStatus, data.Id)
}

func (m *defaultUserApplyModel) Delete(ctx context.Context, session sqlx.Session, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	if session != nil {
		_, err := session.ExecCtx(ctx, query, id)
		return err
	}
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUserApplyModel) tableName() string {
	return m.table
}
