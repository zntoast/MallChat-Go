// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	itemConfigFieldNames          = builder.RawFieldNames(&ItemConfig{})
	itemConfigRows                = strings.Join(itemConfigFieldNames, ",")
	itemConfigRowsExpectAutoSet   = strings.Join(stringx.Remove(itemConfigFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	itemConfigRowsWithPlaceHolder = strings.Join(stringx.Remove(itemConfigFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"
)

type (
	itemConfigModel interface {
		Insert(ctx context.Context, session sqlx.Session, data *ItemConfig) (sql.Result, error)
		FindOne(ctx context.Context, session sqlx.Session, id int64) (*ItemConfig, error)
		Update(ctx context.Context, session sqlx.Session, data *ItemConfig) (sql.Result, error)
		UpdateAndSql(ctx context.Context, session sqlx.Session, data *ItemConfig, andSql string) (sql.Result, error)

		Delete(ctx context.Context, session sqlx.Session, id int64) error
	}

	defaultItemConfigModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ItemConfig struct {
		Id         int64          `db:"id"`          // 物品ID
		Type       int64          `db:"type"`        // 物品类型 1改名卡 2徽章
		Img        sql.NullString `db:"img"`         // 物品图片
		Describe   sql.NullString `db:"describe"`    // 物品功能描述
		CreateTime time.Time      `db:"create_time"` // 创建时间
		UpdateTime time.Time      `db:"update_time"` // 修改时间
	}
)

func newItemConfigModel(conn sqlx.SqlConn) *defaultItemConfigModel {
	return &defaultItemConfigModel{
		conn:  conn,
		table: "`item_config`",
	}
}

func (m *defaultItemConfigModel) Insert(ctx context.Context, session sqlx.Session, data *ItemConfig) (sql.Result, error) {
	//data.DeleteTime = time.Unix(0,0)

	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, itemConfigRowsExpectAutoSet)
	if session != nil {
		return session.ExecCtx(ctx, query, data.Type, data.Img, data.Describe)
	}
	return m.conn.ExecCtx(ctx, query, data.Type, data.Img, data.Describe)
}

func (m *defaultItemConfigModel) FindOne(ctx context.Context, session sqlx.Session, id int64) (*ItemConfig, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ?  limit 1", itemConfigRows, m.table)
	var resp ItemConfig
	var err error
	if session != nil {
		err = session.QueryRowCtx(ctx, &resp, query, id)
	} else {
		err = m.conn.QueryRowCtx(ctx, &resp, query, id)
	}
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultItemConfigModel) Update(ctx context.Context, session sqlx.Session, data *ItemConfig) (sql.Result, error) {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, itemConfigRowsWithPlaceHolder)
	if session != nil {
		return session.ExecCtx(ctx, query, data.Type, data.Img, data.Describe, data.Id)
	}
	return m.conn.ExecCtx(ctx, query, data.Type, data.Img, data.Describe, data.Id)
}

func (m *defaultItemConfigModel) UpdateAndSql(ctx context.Context, session sqlx.Session, data *ItemConfig, andSql string) (sql.Result, error) {
	query := fmt.Sprintf("update %s set %s where `id` = ? %s", m.table, itemConfigRowsWithPlaceHolder, andSql)
	if session != nil {
		return session.ExecCtx(ctx, query, data.Type, data.Img, data.Describe, data.Id)
	}
	return m.conn.ExecCtx(ctx, query, data.Type, data.Img, data.Describe, data.Id)
}

func (m *defaultItemConfigModel) Delete(ctx context.Context, session sqlx.Session, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	if session != nil {
		_, err := session.ExecCtx(ctx, query, id)
		return err
	}
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultItemConfigModel) tableName() string {
	return m.table
}
