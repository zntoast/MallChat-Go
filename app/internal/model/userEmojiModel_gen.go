// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userEmojiFieldNames          = builder.RawFieldNames(&UserEmoji{})
	userEmojiRows                = strings.Join(userEmojiFieldNames, ",")
	userEmojiRowsExpectAutoSet   = strings.Join(stringx.Remove(userEmojiFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	userEmojiRowsWithPlaceHolder = strings.Join(stringx.Remove(userEmojiFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"
)

type (
	userEmojiModel interface {
		Insert(ctx context.Context, session sqlx.Session, data *UserEmoji) (sql.Result, error)
		FindOne(ctx context.Context, session sqlx.Session, id int64) (*UserEmoji, error)
		Update(ctx context.Context, session sqlx.Session, data *UserEmoji) (sql.Result, error)
		UpdateAndSql(ctx context.Context, session sqlx.Session, data *UserEmoji, andSql string) (sql.Result, error)

		Delete(ctx context.Context, session sqlx.Session, id int64) error
	}

	defaultUserEmojiModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UserEmoji struct {
		Id            int64     `db:"id"`             // 表情包ID
		Uid           int64     `db:"uid"`            // 用户UID
		ExpressionUrl string    `db:"expression_url"` // 表情地址
		DeleteStatus  int64     `db:"delete_status"`  // 逻辑删除(0-正常,1-删除)
		CreateTime    time.Time `db:"create_time"`    // 创建时间
		UpdateTime    time.Time `db:"update_time"`    // 修改时间
	}
)

func newUserEmojiModel(conn sqlx.SqlConn) *defaultUserEmojiModel {
	return &defaultUserEmojiModel{
		conn:  conn,
		table: "`user_emoji`",
	}
}

func (m *defaultUserEmojiModel) Insert(ctx context.Context, session sqlx.Session, data *UserEmoji) (sql.Result, error) {
	//data.DeleteTime = time.Unix(0,0)

	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, userEmojiRowsExpectAutoSet)
	if session != nil {
		return session.ExecCtx(ctx, query, data.Uid, data.ExpressionUrl, data.DeleteStatus)
	}
	return m.conn.ExecCtx(ctx, query, data.Uid, data.ExpressionUrl, data.DeleteStatus)
}

func (m *defaultUserEmojiModel) FindOne(ctx context.Context, session sqlx.Session, id int64) (*UserEmoji, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ?  limit 1", userEmojiRows, m.table)
	var resp UserEmoji
	var err error
	if session != nil {
		err = session.QueryRowCtx(ctx, &resp, query, id)
	} else {
		err = m.conn.QueryRowCtx(ctx, &resp, query, id)
	}
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserEmojiModel) Update(ctx context.Context, session sqlx.Session, data *UserEmoji) (sql.Result, error) {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userEmojiRowsWithPlaceHolder)
	if session != nil {
		return session.ExecCtx(ctx, query, data.Uid, data.ExpressionUrl, data.DeleteStatus, data.Id)
	}
	return m.conn.ExecCtx(ctx, query, data.Uid, data.ExpressionUrl, data.DeleteStatus, data.Id)
}

func (m *defaultUserEmojiModel) UpdateAndSql(ctx context.Context, session sqlx.Session, data *UserEmoji, andSql string) (sql.Result, error) {
	query := fmt.Sprintf("update %s set %s where `id` = ? %s", m.table, userEmojiRowsWithPlaceHolder, andSql)
	if session != nil {
		return session.ExecCtx(ctx, query, data.Uid, data.ExpressionUrl, data.DeleteStatus, data.Id)
	}
	return m.conn.ExecCtx(ctx, query, data.Uid, data.ExpressionUrl, data.DeleteStatus, data.Id)
}

func (m *defaultUserEmojiModel) Delete(ctx context.Context, session sqlx.Session, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	if session != nil {
		_, err := session.ExecCtx(ctx, query, id)
		return err
	}
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUserEmojiModel) tableName() string {
	return m.table
}
