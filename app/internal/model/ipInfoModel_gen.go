// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	ipInfoFieldNames          = builder.RawFieldNames(&IpInfo{})
	ipInfoRows                = strings.Join(ipInfoFieldNames, ",")
	ipInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(ipInfoFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	ipInfoRowsWithPlaceHolder = strings.Join(stringx.Remove(ipInfoFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"
)

type (
	ipInfoModel interface {
		Insert(ctx context.Context, session sqlx.Session, data *IpInfo) (sql.Result, error)
		FindOne(ctx context.Context, session sqlx.Session, id int64) (*IpInfo, error)
		Update(ctx context.Context, session sqlx.Session, data *IpInfo) (sql.Result, error)
		UpdateAndSql(ctx context.Context, session sqlx.Session, data *IpInfo, andSql string) (sql.Result, error)

		Delete(ctx context.Context, session sqlx.Session, id int64) error
	}

	defaultIpInfoModel struct {
		conn  sqlx.SqlConn
		table string
	}

	IpInfo struct {
		Id             int64          `db:"id"`               // IP信息ID
		CreateIp       string         `db:"create_ip"`        // 注册时的ip
		CreateIpDetail sql.NullInt64  `db:"create_ip_detail"` // 注册时的ip详情ID
		UpdateIp       sql.NullString `db:"update_ip"`        // 最新登录的ip
		UpdateIpDetail sql.NullInt64  `db:"update_ip_detail"` // 最新登录的ip详情ID
	}
)

func newIpInfoModel(conn sqlx.SqlConn) *defaultIpInfoModel {
	return &defaultIpInfoModel{
		conn:  conn,
		table: "`ip_info`",
	}
}

func (m *defaultIpInfoModel) Insert(ctx context.Context, session sqlx.Session, data *IpInfo) (sql.Result, error) {
	//data.DeleteTime = time.Unix(0,0)

	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, ipInfoRowsExpectAutoSet)
	if session != nil {
		return session.ExecCtx(ctx, query, data.CreateIp, data.CreateIpDetail, data.UpdateIp, data.UpdateIpDetail)
	}
	return m.conn.ExecCtx(ctx, query, data.CreateIp, data.CreateIpDetail, data.UpdateIp, data.UpdateIpDetail)
}

func (m *defaultIpInfoModel) FindOne(ctx context.Context, session sqlx.Session, id int64) (*IpInfo, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ?  limit 1", ipInfoRows, m.table)
	var resp IpInfo
	var err error
	if session != nil {
		err = session.QueryRowCtx(ctx, &resp, query, id)
	} else {
		err = m.conn.QueryRowCtx(ctx, &resp, query, id)
	}
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultIpInfoModel) Update(ctx context.Context, session sqlx.Session, data *IpInfo) (sql.Result, error) {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, ipInfoRowsWithPlaceHolder)
	if session != nil {
		return session.ExecCtx(ctx, query, data.CreateIp, data.CreateIpDetail, data.UpdateIp, data.UpdateIpDetail, data.Id)
	}
	return m.conn.ExecCtx(ctx, query, data.CreateIp, data.CreateIpDetail, data.UpdateIp, data.UpdateIpDetail, data.Id)
}

func (m *defaultIpInfoModel) UpdateAndSql(ctx context.Context, session sqlx.Session, data *IpInfo, andSql string) (sql.Result, error) {
	query := fmt.Sprintf("update %s set %s where `id` = ? %s", m.table, ipInfoRowsWithPlaceHolder, andSql)
	if session != nil {
		return session.ExecCtx(ctx, query, data.CreateIp, data.CreateIpDetail, data.UpdateIp, data.UpdateIpDetail, data.Id)
	}
	return m.conn.ExecCtx(ctx, query, data.CreateIp, data.CreateIpDetail, data.UpdateIp, data.UpdateIpDetail, data.Id)
}

func (m *defaultIpInfoModel) Delete(ctx context.Context, session sqlx.Session, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	if session != nil {
		_, err := session.ExecCtx(ctx, query, id)
		return err
	}
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultIpInfoModel) tableName() string {
	return m.table
}
