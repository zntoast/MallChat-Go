// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	ipDetailFieldNames          = builder.RawFieldNames(&IpDetail{})
	ipDetailRows                = strings.Join(ipDetailFieldNames, ",")
	ipDetailRowsExpectAutoSet   = strings.Join(stringx.Remove(ipDetailFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	ipDetailRowsWithPlaceHolder = strings.Join(stringx.Remove(ipDetailFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"
)

type (
	ipDetailModel interface {
		Insert(ctx context.Context, session sqlx.Session, data *IpDetail) (sql.Result, error)
		FindOne(ctx context.Context, session sqlx.Session, id int64) (*IpDetail, error)
		Update(ctx context.Context, session sqlx.Session, data *IpDetail) (sql.Result, error)
		UpdateAndSql(ctx context.Context, session sqlx.Session, data *IpDetail, andSql string) (sql.Result, error)

		Delete(ctx context.Context, session sqlx.Session, id int64) error
	}

	defaultIpDetailModel struct {
		conn  sqlx.SqlConn
		table string
	}

	IpDetail struct {
		Id        int64          `db:"id"`         // IP详情ID
		Ip        string         `db:"ip"`         // 注册时的ip
		Isp       sql.NullString `db:"isp"`        // 最新登录的ip
		IspId     sql.NullString `db:"isp_id"`     // ISP ID
		City      sql.NullString `db:"city"`       // 城市
		CityId    sql.NullString `db:"city_id"`    // 城市ID
		Country   sql.NullString `db:"country"`    // 国家
		CountryId sql.NullString `db:"country_id"` // 国家ID
		Region    sql.NullString `db:"region"`     // 地区
		RegionId  sql.NullString `db:"region_id"`  // 地区ID
	}
)

func newIpDetailModel(conn sqlx.SqlConn) *defaultIpDetailModel {
	return &defaultIpDetailModel{
		conn:  conn,
		table: "`ip_detail`",
	}
}

func (m *defaultIpDetailModel) Insert(ctx context.Context, session sqlx.Session, data *IpDetail) (sql.Result, error) {
	//data.DeleteTime = time.Unix(0,0)

	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, ipDetailRowsExpectAutoSet)
	if session != nil {
		return session.ExecCtx(ctx, query, data.Ip, data.Isp, data.IspId, data.City, data.CityId, data.Country, data.CountryId, data.Region, data.RegionId)
	}
	return m.conn.ExecCtx(ctx, query, data.Ip, data.Isp, data.IspId, data.City, data.CityId, data.Country, data.CountryId, data.Region, data.RegionId)
}

func (m *defaultIpDetailModel) FindOne(ctx context.Context, session sqlx.Session, id int64) (*IpDetail, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ?  limit 1", ipDetailRows, m.table)
	var resp IpDetail
	var err error
	if session != nil {
		err = session.QueryRowCtx(ctx, &resp, query, id)
	} else {
		err = m.conn.QueryRowCtx(ctx, &resp, query, id)
	}
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultIpDetailModel) Update(ctx context.Context, session sqlx.Session, data *IpDetail) (sql.Result, error) {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, ipDetailRowsWithPlaceHolder)
	if session != nil {
		return session.ExecCtx(ctx, query, data.Ip, data.Isp, data.IspId, data.City, data.CityId, data.Country, data.CountryId, data.Region, data.RegionId, data.Id)
	}
	return m.conn.ExecCtx(ctx, query, data.Ip, data.Isp, data.IspId, data.City, data.CityId, data.Country, data.CountryId, data.Region, data.RegionId, data.Id)
}

func (m *defaultIpDetailModel) UpdateAndSql(ctx context.Context, session sqlx.Session, data *IpDetail, andSql string) (sql.Result, error) {
	query := fmt.Sprintf("update %s set %s where `id` = ? %s", m.table, ipDetailRowsWithPlaceHolder, andSql)
	if session != nil {
		return session.ExecCtx(ctx, query, data.Ip, data.Isp, data.IspId, data.City, data.CityId, data.Country, data.CountryId, data.Region, data.RegionId, data.Id)
	}
	return m.conn.ExecCtx(ctx, query, data.Ip, data.Isp, data.IspId, data.City, data.CityId, data.Country, data.CountryId, data.Region, data.RegionId, data.Id)
}

func (m *defaultIpDetailModel) Delete(ctx context.Context, session sqlx.Session, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	if session != nil {
		_, err := session.ExecCtx(ctx, query, id)
		return err
	}
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultIpDetailModel) tableName() string {
	return m.table
}
