// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	groupMemberFieldNames          = builder.RawFieldNames(&GroupMember{})
	groupMemberRows                = strings.Join(groupMemberFieldNames, ",")
	groupMemberRowsExpectAutoSet   = strings.Join(stringx.Remove(groupMemberFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	groupMemberRowsWithPlaceHolder = strings.Join(stringx.Remove(groupMemberFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheMallchatgoGroupMemberIdPrefix            = "cache:mallchatgo:groupMember:id:"
	cacheMallchatgoGroupMemberGroupIdUserIdPrefix = "cache:mallchatgo:groupMember:groupId:userId:"
)

type (
	groupMemberModel interface {
		Insert(ctx context.Context, data *GroupMember) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*GroupMember, error)
		FindOneByGroupIdUserId(ctx context.Context, groupId int64, userId int64) (*GroupMember, error)
		Update(ctx context.Context, data *GroupMember) error
		Delete(ctx context.Context, id int64) error
	}

	defaultGroupMemberModel struct {
		sqlc.CachedConn
		table string
	}

	GroupMember struct {
		Id       int64 `db:"id"`
		GroupId  int64 `db:"group_id"`  // 群组ID
		UserId   int64 `db:"user_id"`   // 用户ID
		JoinTime int64 `db:"join_time"` // 加入时间
	}
)

func newGroupMemberModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultGroupMemberModel {
	return &defaultGroupMemberModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`group_member`",
	}
}

func (m *defaultGroupMemberModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	mallchatgoGroupMemberGroupIdUserIdKey := fmt.Sprintf("%s%v:%v", cacheMallchatgoGroupMemberGroupIdUserIdPrefix, data.GroupId, data.UserId)
	mallchatgoGroupMemberIdKey := fmt.Sprintf("%s%v", cacheMallchatgoGroupMemberIdPrefix, id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, mallchatgoGroupMemberGroupIdUserIdKey, mallchatgoGroupMemberIdKey)
	return err
}

func (m *defaultGroupMemberModel) FindOne(ctx context.Context, id int64) (*GroupMember, error) {
	mallchatgoGroupMemberIdKey := fmt.Sprintf("%s%v", cacheMallchatgoGroupMemberIdPrefix, id)
	var resp GroupMember
	err := m.QueryRowCtx(ctx, &resp, mallchatgoGroupMemberIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", groupMemberRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGroupMemberModel) FindOneByGroupIdUserId(ctx context.Context, groupId int64, userId int64) (*GroupMember, error) {
	mallchatgoGroupMemberGroupIdUserIdKey := fmt.Sprintf("%s%v:%v", cacheMallchatgoGroupMemberGroupIdUserIdPrefix, groupId, userId)
	var resp GroupMember
	err := m.QueryRowIndexCtx(ctx, &resp, mallchatgoGroupMemberGroupIdUserIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `group_id` = ? and `user_id` = ? limit 1", groupMemberRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, groupId, userId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGroupMemberModel) Insert(ctx context.Context, data *GroupMember) (sql.Result, error) {
	mallchatgoGroupMemberGroupIdUserIdKey := fmt.Sprintf("%s%v:%v", cacheMallchatgoGroupMemberGroupIdUserIdPrefix, data.GroupId, data.UserId)
	mallchatgoGroupMemberIdKey := fmt.Sprintf("%s%v", cacheMallchatgoGroupMemberIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, groupMemberRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.GroupId, data.UserId, data.JoinTime)
	}, mallchatgoGroupMemberGroupIdUserIdKey, mallchatgoGroupMemberIdKey)
	return ret, err
}

func (m *defaultGroupMemberModel) Update(ctx context.Context, newData *GroupMember) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	mallchatgoGroupMemberGroupIdUserIdKey := fmt.Sprintf("%s%v:%v", cacheMallchatgoGroupMemberGroupIdUserIdPrefix, data.GroupId, data.UserId)
	mallchatgoGroupMemberIdKey := fmt.Sprintf("%s%v", cacheMallchatgoGroupMemberIdPrefix, data.Id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, groupMemberRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.GroupId, newData.UserId, newData.JoinTime, newData.Id)
	}, mallchatgoGroupMemberGroupIdUserIdKey, mallchatgoGroupMemberIdKey)
	return err
}

func (m *defaultGroupMemberModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheMallchatgoGroupMemberIdPrefix, primary)
}

func (m *defaultGroupMemberModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", groupMemberRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultGroupMemberModel) tableName() string {
	return m.table
}
