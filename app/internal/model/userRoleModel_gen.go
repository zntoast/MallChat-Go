// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userRoleFieldNames          = builder.RawFieldNames(&UserRole{})
	userRoleRows                = strings.Join(userRoleFieldNames, ",")
	userRoleRowsExpectAutoSet   = strings.Join(stringx.Remove(userRoleFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	userRoleRowsWithPlaceHolder = strings.Join(stringx.Remove(userRoleFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"
)

type (
	userRoleModel interface {
		Insert(ctx context.Context, session sqlx.Session, data *UserRole) (sql.Result, error)
		FindOne(ctx context.Context, session sqlx.Session, id int64) (*UserRole, error)
		Update(ctx context.Context, session sqlx.Session, data *UserRole) (sql.Result, error)
		UpdateAndSql(ctx context.Context, session sqlx.Session, data *UserRole, andSql string) (sql.Result, error)

		Delete(ctx context.Context, session sqlx.Session, id int64) error
	}

	defaultUserRoleModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UserRole struct {
		Id         int64     `db:"id"`          // 角色关系ID
		Uid        int64     `db:"uid"`         // 用户UID
		RoleId     int64     `db:"role_id"`     // 角色ID
		CreateTime time.Time `db:"create_time"` // 创建时间
		UpdateTime time.Time `db:"update_time"` // 修改时间
	}
)

func newUserRoleModel(conn sqlx.SqlConn) *defaultUserRoleModel {
	return &defaultUserRoleModel{
		conn:  conn,
		table: "`user_role`",
	}
}

func (m *defaultUserRoleModel) Insert(ctx context.Context, session sqlx.Session, data *UserRole) (sql.Result, error) {
	//data.DeleteTime = time.Unix(0,0)

	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, userRoleRowsExpectAutoSet)
	if session != nil {
		return session.ExecCtx(ctx, query, data.Uid, data.RoleId)
	}
	return m.conn.ExecCtx(ctx, query, data.Uid, data.RoleId)
}

func (m *defaultUserRoleModel) FindOne(ctx context.Context, session sqlx.Session, id int64) (*UserRole, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ?  limit 1", userRoleRows, m.table)
	var resp UserRole
	var err error
	if session != nil {
		err = session.QueryRowCtx(ctx, &resp, query, id)
	} else {
		err = m.conn.QueryRowCtx(ctx, &resp, query, id)
	}
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserRoleModel) Update(ctx context.Context, session sqlx.Session, data *UserRole) (sql.Result, error) {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userRoleRowsWithPlaceHolder)
	if session != nil {
		return session.ExecCtx(ctx, query, data.Uid, data.RoleId, data.Id)
	}
	return m.conn.ExecCtx(ctx, query, data.Uid, data.RoleId, data.Id)
}

func (m *defaultUserRoleModel) UpdateAndSql(ctx context.Context, session sqlx.Session, data *UserRole, andSql string) (sql.Result, error) {
	query := fmt.Sprintf("update %s set %s where `id` = ? %s", m.table, userRoleRowsWithPlaceHolder, andSql)
	if session != nil {
		return session.ExecCtx(ctx, query, data.Uid, data.RoleId, data.Id)
	}
	return m.conn.ExecCtx(ctx, query, data.Uid, data.RoleId, data.Id)
}

func (m *defaultUserRoleModel) Delete(ctx context.Context, session sqlx.Session, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	if session != nil {
		_, err := session.ExecCtx(ctx, query, id)
		return err
	}
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUserRoleModel) tableName() string {
	return m.table
}
