// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userFieldNames          = builder.RawFieldNames(&User{})
	userRows                = strings.Join(userFieldNames, ",")
	userRowsExpectAutoSet   = strings.Join(stringx.Remove(userFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	userRowsWithPlaceHolder = strings.Join(stringx.Remove(userFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"
)

type (
	userModel interface {
		Insert(ctx context.Context, session sqlx.Session, data *User) (sql.Result, error)
		FindOne(ctx context.Context, session sqlx.Session, id int64) (*User, error)
		Update(ctx context.Context, session sqlx.Session, data *User) (sql.Result, error)
		UpdateAndSql(ctx context.Context, session sqlx.Session, data *User, andSql string) (sql.Result, error)

		Delete(ctx context.Context, session sqlx.Session, id int64) error
	}

	defaultUserModel struct {
		conn  sqlx.SqlConn
		table string
	}

	User struct {
		Id           int64          `db:"id"`            // 用户ID
		Name         string         `db:"name"`          // 用户昵称
		Avatar       sql.NullString `db:"avatar"`        // 用户头像
		Sex          sql.NullInt64  `db:"sex"`           // 性别 1为男性，2为女性
		OpenId       sql.NullString `db:"open_id"`       // 微信openid用户标识
		ActiveStatus sql.NullInt64  `db:"active_status"` // 上下线状态 1在线 2离线
		LastOptTime  sql.NullTime   `db:"last_opt_time"` // 最后上下线时间
		IpInfo       sql.NullString `db:"ip_info"`       // 用户IP信息
		ItemId       sql.NullInt64  `db:"item_id"`       // 佩戴的徽章ID
		Status       sql.NullInt64  `db:"status"`        // 用户状态 0正常 1拉黑
		CreateTime   time.Time      `db:"create_time"`   // 创建时间
		UpdateTime   time.Time      `db:"update_time"`   // 修改时间
	}
)

func newUserModel(conn sqlx.SqlConn) *defaultUserModel {
	return &defaultUserModel{
		conn:  conn,
		table: "`user`",
	}
}

func (m *defaultUserModel) Insert(ctx context.Context, session sqlx.Session, data *User) (sql.Result, error) {
	//data.DeleteTime = time.Unix(0,0)

	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, userRowsExpectAutoSet)
	if session != nil {
		return session.ExecCtx(ctx, query, data.Name, data.Avatar, data.Sex, data.OpenId, data.ActiveStatus, data.LastOptTime, data.IpInfo, data.ItemId, data.Status)
	}
	return m.conn.ExecCtx(ctx, query, data.Name, data.Avatar, data.Sex, data.OpenId, data.ActiveStatus, data.LastOptTime, data.IpInfo, data.ItemId, data.Status)
}

func (m *defaultUserModel) FindOne(ctx context.Context, session sqlx.Session, id int64) (*User, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ?  limit 1", userRows, m.table)
	var resp User
	var err error
	if session != nil {
		err = session.QueryRowCtx(ctx, &resp, query, id)
	} else {
		err = m.conn.QueryRowCtx(ctx, &resp, query, id)
	}
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) Update(ctx context.Context, session sqlx.Session, data *User) (sql.Result, error) {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userRowsWithPlaceHolder)
	if session != nil {
		return session.ExecCtx(ctx, query, data.Name, data.Avatar, data.Sex, data.OpenId, data.ActiveStatus, data.LastOptTime, data.IpInfo, data.ItemId, data.Status, data.Id)
	}
	return m.conn.ExecCtx(ctx, query, data.Name, data.Avatar, data.Sex, data.OpenId, data.ActiveStatus, data.LastOptTime, data.IpInfo, data.ItemId, data.Status, data.Id)
}

func (m *defaultUserModel) UpdateAndSql(ctx context.Context, session sqlx.Session, data *User, andSql string) (sql.Result, error) {
	query := fmt.Sprintf("update %s set %s where `id` = ? %s", m.table, userRowsWithPlaceHolder, andSql)
	if session != nil {
		return session.ExecCtx(ctx, query, data.Name, data.Avatar, data.Sex, data.OpenId, data.ActiveStatus, data.LastOptTime, data.IpInfo, data.ItemId, data.Status, data.Id)
	}
	return m.conn.ExecCtx(ctx, query, data.Name, data.Avatar, data.Sex, data.OpenId, data.ActiveStatus, data.LastOptTime, data.IpInfo, data.ItemId, data.Status, data.Id)
}

func (m *defaultUserModel) Delete(ctx context.Context, session sqlx.Session, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	if session != nil {
		_, err := session.ExecCtx(ctx, query, id)
		return err
	}
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUserModel) tableName() string {
	return m.table
}
