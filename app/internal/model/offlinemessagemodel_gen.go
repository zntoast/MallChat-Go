// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	offlineMessageFieldNames          = builder.RawFieldNames(&OfflineMessage{})
	offlineMessageRows                = strings.Join(offlineMessageFieldNames, ",")
	offlineMessageRowsExpectAutoSet   = strings.Join(stringx.Remove(offlineMessageFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	offlineMessageRowsWithPlaceHolder = strings.Join(stringx.Remove(offlineMessageFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheMallchatgoOfflineMessageIdPrefix = "cache:mallchatgo:offlineMessage:id:"
)

type (
	offlineMessageModel interface {
		Insert(ctx context.Context, data *OfflineMessage) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*OfflineMessage, error)
		Update(ctx context.Context, data *OfflineMessage) error
		Delete(ctx context.Context, id int64) error
	}

	defaultOfflineMessageModel struct {
		sqlc.CachedConn
		table string
	}

	OfflineMessage struct {
		Id         int64  `db:"id"`
		UserId     int64  `db:"user_id"`     // 接收者ID
		SenderId   int64  `db:"sender_id"`   // 发送者ID
		Content    string `db:"content"`     // 消息内容
		Type       int64  `db:"type"`        // 消息类型
		CreateTime int64  `db:"create_time"` // 创建时间
	}
)

func newOfflineMessageModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultOfflineMessageModel {
	return &defaultOfflineMessageModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`offline_message`",
	}
}

func (m *defaultOfflineMessageModel) Delete(ctx context.Context, id int64) error {
	mallchatgoOfflineMessageIdKey := fmt.Sprintf("%s%v", cacheMallchatgoOfflineMessageIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, mallchatgoOfflineMessageIdKey)
	return err
}

func (m *defaultOfflineMessageModel) FindOne(ctx context.Context, id int64) (*OfflineMessage, error) {
	mallchatgoOfflineMessageIdKey := fmt.Sprintf("%s%v", cacheMallchatgoOfflineMessageIdPrefix, id)
	var resp OfflineMessage
	err := m.QueryRowCtx(ctx, &resp, mallchatgoOfflineMessageIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", offlineMessageRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOfflineMessageModel) Insert(ctx context.Context, data *OfflineMessage) (sql.Result, error) {
	mallchatgoOfflineMessageIdKey := fmt.Sprintf("%s%v", cacheMallchatgoOfflineMessageIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, offlineMessageRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.SenderId, data.Content, data.Type)
	}, mallchatgoOfflineMessageIdKey)
	return ret, err
}

func (m *defaultOfflineMessageModel) Update(ctx context.Context, data *OfflineMessage) error {
	mallchatgoOfflineMessageIdKey := fmt.Sprintf("%s%v", cacheMallchatgoOfflineMessageIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, offlineMessageRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.UserId, data.SenderId, data.Content, data.Type, data.Id)
	}, mallchatgoOfflineMessageIdKey)
	return err
}

func (m *defaultOfflineMessageModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheMallchatgoOfflineMessageIdPrefix, primary)
}

func (m *defaultOfflineMessageModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", offlineMessageRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultOfflineMessageModel) tableName() string {
	return m.table
}
